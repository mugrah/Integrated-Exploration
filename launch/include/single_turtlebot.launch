<?xml version="1.0"?>
<launch>
  <arg name="ns" default="robot_0"/>
  <arg name="alpha" default="0.5"/>
  <arg name="beta" default="0.5"/>
  <!-- **************************** gmapping ****************************-->
  <node pkg="gmapping" type="slam_gmapping" name="slam_gmapping" output="screen">
    <param name="base_frame" value="/$(arg ns)/base_footprint"/>
    <param name="map_frame" value="/$(arg ns)/map"/>
    <param name="odom_frame" value="/$(arg ns)/odom"/>
    <param name="occ_map_frame" value="/$(arg ns)/occ_map" />
    <param name="map_update_interval" value="0.5" />
    <!-- If regions with no obstacles within the range of the sensor should appear as free space in the map, set maxUrange < maximum range of the real sensor <= maxRange.  -->
    <param name="maxUrange" value="5.0"/>
    <param name="maxRange" value="5.5"/>
    <!-- <param name="kernelSize" value="3" /> -->
    <param name="minimumScore" value="200"/>
    <param name="linearUpdate" value="0.4"/>
    <param name="angularUpdate" value="0.4"/>
    <param name="particles" value="20"/>
    <param name="xmin" value="-1.0"/>
    <param name="ymin" value="-1.0"/>
    <param name="xmax" value="1.0"/>
    <param name="ymax" value="1.0"/>
    <!-- <param name="delta" value="0.1"/> -->

    <!-- <remap from="scan" to="base_scan"/> -->
    <remap from="scan" to="base_scan_filtered"/>
  </node>

  <!-- **************************** move_base ****************************-->
  <arg name="odom_frame_id"   default="odom"/>
  <arg name="base_frame_id"   default="base_footprint"/>
  <arg name="global_frame_id" default="map"/>
  <arg name="odom_topic" default="odom" />
  <arg name="laser_topic" default="scan" />
  <arg name="custom_param_file" default="$(find turtlebot_navigation)/param/dummy.yaml"/>

  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find turtlebot_navigation)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find turtlebot_navigation)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />   
    <rosparam file="$(find turtlebot_navigation)/param/local_costmap_params.yaml" command="load" />   
    <rosparam file="$(find turtlebot_navigation)/param/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find pioneer3at)/param/dwa_local_planner_params.yaml" command="load" />
    <rosparam file="$(find turtlebot_navigation)/param/move_base_params.yaml" command="load" />
    <rosparam file="$(find pioneer3at)/param/global_planner_params.yaml" command="load" />
    <rosparam file="$(find pioneer3at)/param/navfn_global_planner_params.yaml" command="load" />
    <!-- external params file that could be loaded into the move_base namespace -->
    <rosparam file="$(arg custom_param_file)" command="load" />
    
    <!-- reset frame_id parameters using user input data -->
    <param name="global_costmap/global_frame" value="/$(arg ns)/map"/>
    <param name="global_costmap/robot_base_frame" value="/$(arg ns)/base_footprint"/>
    <param name="local_costmap/global_frame" value="/$(arg ns)/map"/>
    <param name="local_costmap/robot_base_frame" value="/$(arg ns)/base_footprint"/>
    <param name="DWAPlannerROS/global_frame_id" value="/$(arg ns)/map"/>

    <remap from="cmd_vel" to="raw_cmd_vel"/>
    <remap from="odom" to="$(arg odom_topic)"/>
    <!-- <remap from="scan" to="base_scan"/> -->
    <remap from="scan" to="base_scan_filtered"/>
  </node>

  <!-- Move base -->
  <node name="laser_filter" pkg="pioneer3at" type="laser_filter.py" output="screen" />

  <!-- Move base -->
  <!-- <include file="$(find turtlebot_navigation)/launch/includes/move_base.launch.xml"/> -->

  <!-- **************************** Explorer ****************************-->
  <node pkg="pioneer3at" type="explorer" name="Explorer" required="true" output="screen">
    <param name="robot_topic" type="str" value="/$(arg ns)" />
    <param name="goal_topic" type="str" value="/$(arg ns)/move_base_simple/goal" />
    <param name="occ_map_topic" type="str" value="/$(arg ns)/occ_map" />
    <param name="map_topic" type="str" value="/$(arg ns)/map" />
    <param name="pose_topic" type="str" value="/$(arg ns)/odom" />
    <param name="base_link_topic" type="str" value="/$(arg ns)/base_link" />
    <!-- <rosparam file="$(find pioneer3at)/config/explorer/test.yaml" command="load" /> -->
    <!-- Substitute file params to cmd_line params -->
    <param name="alpha" type="double" value="$(arg alpha)" />
    <param name="beta" type="double" value="$(arg beta)" />
    <param name="gama" type="double" value="0.0" />
    <param name="a_beta" type="double" value="3.0" />
    <param name="b_beta" type="double" value="9.0" />
    <param name="robot_radius" type="double" value="0.2" />
  </node>

  <!-- **************************** Turtlebot ****************************-->
  <param name="tf_prefix" value="$(arg ns)" />
  <arg name="urdf_file" default="$(find xacro)/xacro --inorder '$(find pioneer3at)/urdf/kobuki_hexagons_r200.urdf.xacro'"/>
  <param name="robot_description" command="$(arg urdf_file)"/>

  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>

  <!-- ******* Save the path made ******* -->
  <node name="path_saver" pkg="pioneer3at" type="traveled_distance.py" output="screen" >
    <param name="step" type="double" value="0.5"/>
    <param name="file_name" type="str" value="$(find pioneer3at)/debug/$(arg ns)_$(arg alpha)_$(arg beta)_path.txt"/>
  </node>

  <!-- ******* Apply potential field on cmd_vel based in the laser  ******* -->
  <node name="cmd_vel_filter" pkg="pioneer3at" type="pot_field.py" output="screen" >
    <param name="min_obstacle_range" type="double" value="0.5"/>
    <param name="repulsive_gain" type="double" value="0.01"/>
    <param name="holonomic" type="boolean" value="false"/>
    <!-- for non holonomic robots -->
    <param name="desai_const" type="double" value="3.0"/>
  </node>

  <!-- <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="5.0" />
  </node> -->
</launch>
